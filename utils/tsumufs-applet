#!/usr/bin/python
# -*- python -*-
#
# Copyright (C) 2008  Google, Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os
import os.path
import sys
import errno
import stat
import traceback
import shutil
import time
import augeas
import ConfigParser

import pygtk
pygtk.require('2.0')

import gobject
import pynotify
import xattr

__version__  = (0, 1)

import dbus
import dbus.glib
import dbus.service
import gobject

# required
import dbus.glib
import gtk

from ufo import utils
from ufo.database import DocumentHelper, DocumentException
from ufo.sharing import FriendDocument
from ufo.constants import Notification, FriendshipStatus
from ufo.notify import *

from tsumufs import SyncChangeDocument

from threading import Thread, Timer

gobject.threads_init()
dbus.glib.init_threads()

import gettext
gettext.textdomain('tsumufs')
_ = gettext.gettext

import functools
__ = functools.partial(gettext.dgettext, "python-ufo")

import xmlrpclib as rpc
from ipalib.rpc import KerbTransport


class TrayIcon(gtk.StatusIcon):

  _fsMountPoint = None

  _isUnmounted    = False
  _isPaused       = False
  _isConnected    = False
  _isConflicted   = False
  _isSynchronizing = False

  _updateIconTimer = None

  _firstConnectedStatus = False

  def __init__(self, fsMountPoint):
    gtk.StatusIcon.__init__(self)
    self.__gobject_init__()

    self._fsMountPoint = fsMountPoint
    self._isUnmounted = False

    # Initializing TrayIcon object.
    pynotify.init('tsumufs-applet')

    self.connect('popup-menu', self._popup)

    self.set_visible(1)
    self.set_tooltip(_("Synchronization and file sharing notifications"))

    self.menu = gtk.Menu()

    # Building state info menu item
    self.state = gtk.ImageMenuItem(_("Disconnected"))
    img = gtk.Image()
    img.set_from_file(os.path.join(iconPathPrefix, 'ufo_icon.png'))
    self.state.set_image(img)
    self.menu.append(self.state)

    # Building pause checkbox menu item
    self.pausecheck = gtk.CheckMenuItem(_("Pause synchronization"))
    self.pausecheck.connect('activate', self._pauseSynchronization)
    self.menu.append(self.pausecheck)

    bar = gtk.SeparatorMenuItem()
    self.menu.append(bar)

    # Build a submenu to show all items which are in the sync queue
    self.syncmain = gtk.ImageMenuItem(_("Files not synchronized"))
    path = os.path.join(iconPathPrefix, 'synchronized.png')
    pImage = gtk.image_new_from_file(path)
    self.syncmain.set_image(pImage)
    self.syncmain.set_sensitive(False)
    self.menu.append(self.syncmain)

    self.syncmenu = gtk.Menu()
    self.syncmain.set_submenu(self.syncmenu)

    # Build a submenu to show all non read messages
    self.notifymain = gtk.ImageMenuItem(_("Received messages"))
    path = os.path.join(iconPathPrefix, 'synchronized.png')
    pImage = gtk.image_new_from_file(path)
    self.notifymain.set_image(pImage)
    self.notifymain.set_sensitive(False)
    self.menu.append(self.notifymain)

    self.notifymenu = gtk.Menu()
    self.notifymain.set_submenu(self.notifymenu)

    self._updateIconTimer = Timer(2.0, self._updateIcon)

    self._firstConnectedStatus = True
    self._updateIcon()

    while gtk.events_pending():
      gtk.main_iteration(False)

    # Waiting for tsumufs responding
    version = None
    while not version:
      try:
        version = xattr.getxattr(overlay, "tsumufs.version")
        print "Tsumufs version %s mounted !" % version

        dbname = xattr.getxattr(overlay, "tsumufs.dbname")

      except IOError, e:
        print "Tsumufs not mounted yet !"
        time.sleep(3)

    self._monitorChangesThread = MonitorChangesThread(dbname, self._fsMountPoint)
    self._monitorChangesThread.connect('notify-event', self.notifyChange)
    self._monitorChangesThread.connect('update-event', self.updateSyncMenu)
    self._monitorChangesThread.start()

  def updateIcon(self):
    gobject.idle_add(self._updateIcon, None)

  def _updateIcon(self, data=None):
    """
    Choose the trayIcon according to connexion state.
    If SyncWork event is set, then _isSynchronizing is True
    SyncWork is set during propogate changes
    """

    if self._isUnmounted:
      path = os.path.join(iconPathPrefix, 'unmounted.png')
      label = _("Unavailable")
    elif not self._isConnected:
      path = os.path.join(iconPathPrefix, 'disconnected.png')
      label = _("Disconnected")
    elif self._isPaused:
      path = os.path.join(iconPathPrefix, 'paused.png')
      label = _("Paused")
    elif self._isSynchronizing:
      path = os.path.join(iconPathPrefix, 'syncro_file.png')
      label = _("Synchronizing")
    else:
      path = os.path.join(iconPathPrefix, 'connected.png')
      label = _("Connected")

    pixbuf = gtk.gdk.pixbuf_new_from_file(path)

    if self._isConflicted:
      path = os.path.join(iconPathPrefix, 'conflicted.png')
      pixbuf.blit_from_file(path)

    size = self.get_size()
    pixbuf.scale_simple(size, size, gtk.gdk.INTERP_BILINEAR)
    self.set_from_pixbuf(pixbuf)
    
    self.state.set_label(label)

  def updateSyncMenu(self, widget):
    gobject.idle_add(self._updateSyncMenu, None)

  def _updateSyncMenu(self, data=None):
    changes = self._monitorChangesThread.getChanges()
    if changes:
      menuitems = []
      self.syncmain.set_sensitive(True)
      for change in changes.values():
        # Add new items
        if not change.has_key('menuitem'):
          img = gtk.Image()
          img.set_from_file(change['icon'])
          menuitem = gtk.ImageMenuItem(change['name'])
          menuitem.set_image(img)

          change['menuitem'] = menuitem
          self.syncmenu.append(menuitem)
          menuitem.show()
          self.syncmenu.show_all()

        menuitems.append(change['menuitem'])

      # Remove old ones
      for item in self.syncmenu.get_children():
        if item not in menuitems:
          self.syncmenu.remove(item)

    else:
      # Remove all items
      for item in self.syncmenu.get_children():
        self.syncmenu.remove(item)

      self.syncmain.set_sensitive(False)

  def notify(self, title, body, uri):
    gobject.idle_add(self._notify, { 'title' : title,
                                     'body'  : body,
                                     'uri'   : uri })

  def _notify(self, data):
    notification = pynotify.Notification(data['title'], data['body'], data['uri'])
    notification.attach_to_status_icon(self)
    notification.show()

  def _notify_by_id(self, widget, id):
    self._monitorChangesThread.getNotification(id)['notification'].show()

  def notifyChange(self, widget, id):
    gobject.idle_add(self._notifyChange, id)

  def _notifyChange(self, id):
    desc = self._monitorChangesThread.getNotification(id)

    # Building notification
    notification = pynotify.Notification(desc['title'], desc['body'], desc['icon'])
    notification.attach_to_status_icon(self)
    notification.set_urgency(pynotify.URGENCY_NORMAL)
    notification.set_timeout(pynotify.EXPIRES_NEVER)

    # Building menu item
    menuitem = gtk.ImageMenuItem(desc['summary'])
    img = gtk.Image()
    img.set_from_file(desc['icon'])
    menuitem.set_image(img)

    desc['menuitem'] = menuitem
    desc['notification'] = notification

    # Adding the menu item to menu
    menuitem.connect('activate', self._notify_by_id, id)
    self.notifymenu.append(menuitem)
    self.notifymain.set_sensitive(True)

    # Add a generic action 'Ok' when no action defined
    if not desc['actions']:
      desc['actions'] = { 'none' : _("Ok") }

    # Add some actions specific to the UFO distro client
    if desc['type'] == 'NewShare':
      desc['actions']['proceed-pending-shares'] = _("Open containing folder...")

    # Connect actions to the callback
    for action in desc['actions']:
      notification.add_action(action,
                              desc['actions'][action],
                              self._changeNotificationClicked,
                              id)

    notification.attach_to_status_icon(self)
    notification.show()

  def _changeNotificationClicked(self, widget, event, id):
      desc = self._monitorChangesThread.getNotification(id)

      try:
        menuitem = desc['menuitem']
        notification = desc['notification']

        # Calling corresponding callback
        desc['callback'].__call__(event, id)

        # If no errors, removing the menu item
        self.notifymenu.remove(menuitem)
        if not self.notifymenu.get_children():
          self.notifymain.set_sensitive(False)

        del notification
        del menuitem
        del widget

      except Exception, e:
        self._notifyError(_("An error has occurred ('%s', %s)")
                          % (event, str(e)))

  def _notifyError(self, message):
    error = pynotify.Notification(_("Error"),
                                  _(message),
                                  os.path.join(iconPathPrefix, 'ufo.png'))
    error.attach_to_status_icon(self)
    error.show()

  def _cleanup(self):
    gtk.main_quit()

  def _popup(self, icon, event_button, event_time):
    self.menu.show_all()
    self.menu.popup(None, None, gtk.status_icon_position_menu,
                    event_button, event_time, icon)

  def _pauseSynchronization(self, state):
    if self._isPaused:
      xattr.setxattr(self._fsMountPoint, "tsumufs.pause-sync", '0')
      self.pausecheck.set_active(False)

    else:
      xattr.setxattr(self._fsMountPoint, "tsumufs.pause-sync", '1')
      self.pausecheck.set_active(True)

  def _notifyConnectedStatus(self, status):
    if status:
      title = _("Connected to server")
      body = _("Successfully logged in to the synchronization server.")
      uri = os.path.join(iconPathPrefix, 'ufo.png')

    else:
      summary = _("Disconnected from server")
      body = _("You have been disconnected, file synchronization stopped.")
      uri = os.path.join(iconPathPrefix, 'ufo.png')

    self.notify(title, body, uri)

  def handleSyncPauseStatusSignal(self, status):
    self._isUnmounted = False

    print "Signal received: SyncPauseStatus, %s" % str(status)
    self._isPaused = status
    if not status:
      self._rearmUpdateIconTimer()
    else:
      self.updateIcon()

  def handleConnectionStatusSignal(self, status):
    self._isUnmounted = False

    print "Signal received: ConnectionStatus, %s" % str(status)

    old_isConnected = self._isConnected
    self._isConnected = status

    if self._isConnected != old_isConnected:
      self.updateIcon()
      if self._firstConnectedStatus:
        self._notifyConnectedStatus(status)
        self._firstConnectedStatus = False

  def notifySyncWorkStatusSignal(self, status):
    self._isUnmounted = False

    print "Signal received: SyncWorkStatus, %s" % str(status)
    self._isSynchronizing = status
    if not status:
      self._rearmUpdateIconTimer()
    else:
      self.updateIcon()

  def handleUnmountedStatusSignal(self, status):
    print "Signal received: UnmountedStatus, %s" % str(status)
    self._isUnmounted = status
    self.updateIcon()

  def _rearmUpdateIconTimer(self):
    self._updateIconTimer.cancel()
    self._updateIconTimer = Timer(self._updateIconTimer.interval,
                                  self._updateIconTimer.function)
    self._updateIconTimer.start()


class MonitorChangesThread(Thread, gobject.GObject):
  """
  Fetch messages from the ufo core components file sharing platform.
  """

  _syncchange_helper = None
  _notifification_helper = None

  _changes = {}
  _notifications = {}

  _icon_names = { 'new'    : 'new_file.png',
                  'link'   : 'new_file.png',
                  'unlink' : 'delete_file.png',
                  'change' : 'update_file.png',
                  'rename' : 'rename_file.png' }

  __gsignals__ = { 'notify-event' : (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE,
                                    (gobject.TYPE_STRING,)),
                   'update-event' : (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, ())  }

  def __init__(self, dbname, overlay):
    Thread.__init__(self, name='MonitorChangesThread')
    self.__gobject_init__()

    self._syncchange_helper = DocumentHelper(SyncChangeDocument, dbname)
    self._notifification_helper = DocumentHelper(NotificationDocument, dbname)
    
    self.dbname = dbname
    self.overlay = overlay

  def getNotification(self, id=None):
    if id:
      return self._notifications[id]
    return self._notifications

  def getChanges(self, id=None):
    if id:
      return self._changes[id]
    return self._changes

  def _notify(self, id):
    self.emit('notify-event', id)

  def _update(self):
    self.emit('update-event')

  def _handleSyncChange(self, syncchange):
    if syncchange.type == "rename":
      name = syncchange.new_fname
    else:
      name = syncchange.filename

    self._changes[syncchange.id] = { 'name' : name,
                                     'icon' : os.path.join(iconPathPrefix,
                                                           self._icon_names[syncchange.type]) }
    self._update()

  def _handleNotification(self, notification):
    if not self._notifications.has_key(notification.id):
      klass = globals()[notification.subtype + "Notification"]
      notification = DocumentHelper(klass, self.dbname).by_id(key=notification.id, pk=True)

      actions = {}
      for handler in notification.actions:
        actions[handler] = __(notification.actions[handler])

      # Adding notification to notification queue
      self._notifications[notification.id] = { 'type'     : notification.subtype,
                                               'title'    : __(notification.title),
                                               'body'     : __(notification.body),
                                               'icon'     : os.path.join(iconPathPrefix, 'ufo.png'),
                                               'summary'  : __(notification.summary),
                                               'filepath' : getattr(notification, "filepath", ""),
                                               'actions'  : actions,
                                               'callback' : self._notificationClicked }
      self._notify(notification.id)

  def _notificationClicked(self, event, id):
    print "Notification clicked: %s" % str(id)

    try:
      # Retrieve the notification type
      subtype = self._notifications[id].get('type')
      helper = DocumentHelper(globals()[subtype + 'Notification'], self.dbname)

      # Instantiate the corresponding class
      notification = helper.by_id(key=id, pk=True)

      # TODO: Move this in the TrayIcon code, as is UFO distro client specific
      # Raise some behaviors specific to the UFO distro client
      if event == 'proceed-pending-shares':
        fullname = utils.get_user_infos(notification.initiator)['fullname']
        os.system('gnome-open "%s/%s/%s/%s"' % (overlay, self.dbname, _("Buddy shares"), fullname))

      # Raise the class method corresponding to clicked action
      elif event != 'none':
        getattr(notification, event).__call__()

      del self._notifications[id]
      try:
        helper.delete(notification)
      except DocumentException, e:
        print "Got exception while deleting notificatiuon from database, %s" % e

    except Exception, e:
        import sys, traceback
        exc_info = sys.exc_info()
  
        print ('*** Unhandled exception occurred')
        print ('***     Type: %s' % str(exc_info[0]))
        print ('***    Value: %s' % str(exc_info[1]))
        print ('*** Traceback:')
  
        for line in traceback.extract_tb(exc_info[2]):
          print ('***    %s(%d) in %s: %s' % line)

        raise

  def run(self):
    last_sequence = 0
    for change in self._syncchange_helper.by_date():
      self._handleSyncChange(change)

    for change in self._notifification_helper.by_id():
      self._handleNotification(change)

    while True:
      options = { 'feed'         : 'continuous',
                  'include_docs' : True }

      if last_sequence:
        options['since'] = last_sequence

      # Here we can not use to 'changes' method  from DocumentHelper call
      # because the filter on doctype attribute also filter 'delete' changes.
      # So we use 'include_docs' options and filter the doctype manually.
      for change in self._syncchange_helper.database.changes(**options):

        print change

        if change.has_key('last_seq'):
          last_sequence = change.get('last_seq')

        if not change.has_key('id'):
          continue

        # Check deleted SyncChange entries to remove them from sync menu
        if change.get('deleted'):
          if self._changes.has_key(change['id']):
            # Workaroud to wakeup nautilus monitor on this file
            # to update file emblem. utime with no times has effect
            # on the document revision.
            try:
              os.utime(os.path.join(self.overlay, self._changes[change['id']]['name'][1:]), (0, 0))
            except Exceptuion, e:
              print "Got exception while utime %s, %s" % (self._changes[change['id']]['name'][1:], e)

            del self._changes[change['id']]
            self._update()

          continue

        document = change['doc']
        doctype = document.get('doctype')

        if doctype == "SyncChangeDocument":
          self._handleSyncChange(self._syncchange_helper.by_id(key=change["id"], pk=True))

        elif doctype == "NotificationDocument":
          self._handleNotification(self._notifification_helper.by_id(key=change["id"], pk=True))


class DbusMainLoopThread(Thread):

  def __init__(self):
    Thread.__init__(self, name='DbusMainLoopThread')

  def run(self):
    bus = dbus.SystemBus()
    bus.add_signal_receiver(icon.handleConnectionStatusSignal,
                            dbus_interface = "org.tsumufs.NotificationService",
                            signal_name = "_notifyConnectionStatus")
    bus.add_signal_receiver(icon.notifySyncWorkStatusSignal,
                            dbus_interface = "org.tsumufs.NotificationService",
                            signal_name = "_notifySyncWorkStatus")
    bus.add_signal_receiver(icon.handleUnmountedStatusSignal,
                            dbus_interface = "org.tsumufs.NotificationService",
                            signal_name = "_notifyUnmountedStatus")
    bus.add_signal_receiver(icon.handleSyncPauseStatusSignal,
                            dbus_interface = "org.tsumufs.NotificationService",
                            signal_name = "_notifySyncPauseStatus")

    loop = gobject.MainLoop()
    loop.run()

def daemonize():
  if os.fork() > 0:
    sys.exit(0)

  sys.stderr.close()
  sys.stdout.close()
  sys.stdin.close()

if __name__ == '__main__':

  gobject.type_register(MonitorChangesThread)

  iconPathPrefix = "/usr/share/tsumufs/icons"

  # When demonized, we dont receive any dbus signals...
  # daemonize()

  cf = ConfigParser.ConfigParser( defaults = { "debuglevel" : 0 } )
  conf_fs = cf.read( [ os.path.join(os.path.expanduser("~"), ".tsumufs", "tsumufs.conf"),
                       "/etc/tsumufs/tsumufs.conf" ])

  if conf_fs:
      print ("Using configuration file(s) : " + " ".join(conf_fs))
  else:
      print ("No configuration file found")
      sys.exit(-1)

  overlay = ''
  for section in cf.sections():
      if section == "globals": continue
      overlay = cf.get(section, "overlay")

  icon = TrayIcon(overlay)

  _dbusThread = DbusMainLoopThread()
  _dbusThread.start()

  gtk.main()
